import pandas as pd
from sqlalchemy import create_engine

# Configuración de la conexión
config = {
    'user': 'root',
    'password': '',
    'host': 'localhost',
    'database': 'pubs'
}

try:
    # Crear el motor de conexión con SQLAlchemy
    engine = create_engine(f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}")

    # Realizar consultas
    authors = pd.read_sql('SELECT * FROM authors', con=engine)
    titleauthor = pd.read_sql('SELECT * FROM titleauthor', con=engine)
    titles = pd.read_sql('SELECT * FROM titles', con=engine)
    sales = pd.read_sql('SELECT * FROM sales', con=engine)

    # Ganancias por autor
    df_authors = authors.merge(titleauthor, on='au_id').merge(titles, on='title_id').merge(sales, on='title_id')
    df_authors['total_earnings'] = df_authors['qty'] * df_authors['price'] * (df_authors['royaltyper'] / 100)
    df_authors = df_authors.groupby(['au_id', 'au_lname', 'au_fname'])['total_earnings'].sum().reset_index()
    df_authors['author_name'] = df_authors['au_lname'] + ' ' + df_authors['au_fname']

    # Total de ganancias de ventas
    sales_titles = sales.merge(titles, on='title_id')
    total_sales_earnings = (sales_titles['qty'] * sales_titles['price']).sum()

    # Ganancias totales por autor
    total_earnings_authors = df_authors['total_earnings'].sum()

    # Calcular ganancias de la editorial
    total_earnings_editorial = total_sales_earnings - total_earnings_authors

    # Crear un DataFrame para la fila adicional
    additional_row = pd.DataFrame({
        'au_id': [None],
        'au_lname': [None],
        'au_fname': [None],
        'total_earnings': [total_earnings_editorial],
        'author_name': ['Ganancia de editorial']
    })

    # Concatenar DataFrames
    df_final = pd.concat([df_authors, additional_row], ignore_index=True)

    # Ordenar el DataFrame según la lógica especificada
    df_final['order'] = df_final['author_name'].apply(lambda x: 1 if x == 'Ganancia de editorial' else 2)
    df_final = df_final.sort_values(by=['order', 'total_earnings'], ascending=[True, False]).drop(columns=['order'])

    # Exportar a Excel
    output_file = 'ConsultaMatriz.xlsx'
    df_final.to_excel(output_file, index=False)
    print(f"Datos exportados a {output_file}")

    # Mostrar primeras 10 filas
    print(df_final.head(10))

except Exception as e:
    print(f"Error: {e}")